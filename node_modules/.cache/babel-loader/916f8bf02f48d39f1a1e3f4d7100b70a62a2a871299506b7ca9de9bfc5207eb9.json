{"ast":null,"code":"import axios from 'axios';\nexport const callProductEditAPI = async ({\n  productCode,\n  updatedFields\n}) => {\n  console.log('[ProductEditAPICalls] Product Update API Call');\n  const requestURL = `http://localhost:8000/products/${productCode}`;\n  const productDTO = {\n    productName: updatedFields.productName,\n    productThumbAddr: updatedFields.productThumbAddr,\n    refCategoryCode: updatedFields.refCategoryCode,\n    price: updatedFields.price,\n    productDesc: updatedFields.productDesc || '',\n    wishPlaceTrade: updatedFields.wishPlaceTrade || ''\n  };\n  console.log(productDTO);\n  try {\n    const response = await axios.put(requestURL, updatedFields, {\n      headers: {\n        'Authorization': 'Bearer ' + window.localStorage.getItem('accessToken'),\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.status >= 200 && response.status < 300) {\n      const result = response.data;\n      console.log('[ProductEditAPICalls] callProductUpdateAPI RESULT:', result);\n    } else {\n      throw new Error('상품 수정에 실패했습니다.');\n    }\n  } catch (error) {\n    console.error('[ProductEditAPICalls] 상품 수정 API 호출 중 에러:', error);\n  }\n};","map":{"version":3,"names":["axios","callProductEditAPI","productCode","updatedFields","console","log","requestURL","productDTO","productName","productThumbAddr","refCategoryCode","price","productDesc","wishPlaceTrade","response","put","headers","window","localStorage","getItem","status","result","data","Error","error"],"sources":["/Users/minbumkim/Desktop/[FE]/src/apis/ProductEditAPICalls.js"],"sourcesContent":["import axios from 'axios';\n\nexport const callProductEditAPI = async ({ productCode, updatedFields }) => {\n    console.log('[ProductEditAPICalls] Product Update API Call');\n\n    const requestURL = `http://localhost:8000/products/${productCode}`;\n\n    const productDTO = {\n        productName: updatedFields.productName,\n        productThumbAddr: updatedFields.productThumbAddr,\n        refCategoryCode: updatedFields.refCategoryCode,\n        price: updatedFields.price,\n        productDesc: updatedFields.productDesc || '',\n        wishPlaceTrade: updatedFields.wishPlaceTrade || '',\n      };\n\n      console.log(productDTO);\n\n\n    try {\n        const response = await axios.put(requestURL, updatedFields, {\n            headers: {\n                'Authorization': 'Bearer ' + window.localStorage.getItem('accessToken'),\n                'Content-Type': 'application/json'\n            }\n        });\n\n        if (response.status >= 200 && response.status < 300) {\n            const result = response.data;\n            console.log('[ProductEditAPICalls] callProductUpdateAPI RESULT:', result);\n        } else {\n            throw new Error('상품 수정에 실패했습니다.');\n        }\n    } catch (error) {\n        console.error('[ProductEditAPICalls] 상품 수정 API 호출 중 에러:', error);\n    }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAO;EAAEC,WAAW;EAAEC;AAAc,CAAC,KAAK;EACxEC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;EAE5D,MAAMC,UAAU,GAAI,kCAAiCJ,WAAY,EAAC;EAElE,MAAMK,UAAU,GAAG;IACfC,WAAW,EAAEL,aAAa,CAACK,WAAW;IACtCC,gBAAgB,EAAEN,aAAa,CAACM,gBAAgB;IAChDC,eAAe,EAAEP,aAAa,CAACO,eAAe;IAC9CC,KAAK,EAAER,aAAa,CAACQ,KAAK;IAC1BC,WAAW,EAAET,aAAa,CAACS,WAAW,IAAI,EAAE;IAC5CC,cAAc,EAAEV,aAAa,CAACU,cAAc,IAAI;EAClD,CAAC;EAEDT,OAAO,CAACC,GAAG,CAACE,UAAU,CAAC;EAGzB,IAAI;IACA,MAAMO,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAACT,UAAU,EAAEH,aAAa,EAAE;MACxDa,OAAO,EAAE;QACL,eAAe,EAAE,SAAS,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;QACvE,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,IAAIL,QAAQ,CAACM,MAAM,IAAI,GAAG,IAAIN,QAAQ,CAACM,MAAM,GAAG,GAAG,EAAE;MACjD,MAAMC,MAAM,GAAGP,QAAQ,CAACQ,IAAI;MAC5BlB,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEgB,MAAM,CAAC;IAC7E,CAAC,MAAM;MACH,MAAM,IAAIE,KAAK,CAAC,gBAAgB,CAAC;IACrC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZpB,OAAO,CAACoB,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;EACpE;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
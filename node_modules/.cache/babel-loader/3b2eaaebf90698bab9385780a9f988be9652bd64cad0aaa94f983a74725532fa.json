{"ast":null,"code":"import axios from 'axios';\nimport { GET_REPORTS, GET_PROCESSDETAIL, POST_REPORT, PUT_REPORT } from '../modules/ReportModule.js';\nexport const callReportManagementAPI = ({\n  currentPage\n}) => {\n  console.log('[ReportAPICalls] callReportAPI Call');\n  let requestURL;\n  if (currentPage !== undefined || currentPage !== null) {\n    requestURL = `http://localhost:8000/reports/reports?offset=${currentPage}`;\n  } else {\n    requestURL = `http://localhost:8000/reports/reports`;\n  }\n  return async (dispatch, getState) => {\n    const result = await fetch(requestURL, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"*/*\"\n      }\n    }).then(response => response.json());\n    console.log('[ReportAPICalls] callReportList Result : ', result);\n    dispatch({\n      type: GET_REPORTS,\n      payload: result\n    });\n  };\n};\nexport const callReportRegistAPI = ({\n  form\n}) => {\n  const requestURL = `http://localhost:8000/reports/report`;\n  console.log('[ReportRegist] fromData 유저닉네임 : ', form.get('reportUserNick'));\n  let distinction = \"N\";\n  return async (dispatch, getState) => {\n    const result = await axios.post(requestURL, {\n      reportUserNick: form.get('reportUserNick'),\n      refReportCategoryNo: form.get('refReportCategoryNo'),\n      productCode: form.get('productCode'),\n      reportComment: form.get('reportComment'),\n      sellStatusCode: form.get('sellStatusCode'),\n      processDistinction: distinction\n    }).then(response => response);\n    console.log('[ReportAPICalls] callReportWriteAPI RESULT : ', result);\n    dispatch({\n      type: POST_REPORT,\n      payload: result\n    });\n  };\n};\nexport const callReportUpdateAPI = ({\n  form\n}) => {\n  console.log('[ReportAPICalls] callProductUpdateAPI Call');\n  const requestURL = `http://localhost:8000/reports/process`;\n  return async (dispatch, getStatus) => {\n    let date = new Date();\n    let processCode = \"Y\";\n    const result = await axios.put(requestURL, {\n      reportNo: form.get('reportNo'),\n      processDistinction: processCode,\n      processComment: form.get('processComment'),\n      sellStatusCode: form.get('sellStatusCode'),\n      processDate: date\n    }).then(response => response);\n    console.log('[ReportAPICalls] callProductUpdateAPI RESULT : ', result);\n    dispatch({\n      type: PUT_REPORT,\n      payload: result\n    });\n  };\n};\nexport const callReportDetailAPI = ({\n  reportNo\n}) => {\n  console.log(\"[ReportAPICalls] ReportDetailAPI :\", reportNo);\n  const requestURL = `http://localhost:8000/reports/processDetail/${reportNo}`;\n  console.log('[ReportAPICall] callReportDetailAPI : ');\n  return async (dispatch, getState) => {\n    const result = await fetch(requestURL, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"*/*\"\n      }\n    }).then(response => response.json());\n    console.log('[ReportAPICalls] callReportDetailAPI RESULT : ', result);\n    if (result.status === 200) {\n      console.log('[ReportAPICalls] callReportDetailAPI SUCCESS');\n      dispatch({\n        type: GET_PROCESSDETAIL,\n        payload: result\n      });\n    }\n  };\n};\nexport const callSearchReportAPI = ({\n  search\n}) => {\n  console.log('[ReportAPICalls] callSearchReportAPI Call');\n  console.log(\"에피아이 안들어오냐 ? ? :\", search);\n  const requestURL = `http://localhost:8000/search?s=${search}`;\n  return async (dispatch, getState) => {\n    const result = await fetch(requestURL, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"*/*\"\n      }\n    }).then(response => response.json());\n    console.log('[ReportAPICalls] callSearchReportAPI RESULT : ', result);\n    dispatch({\n      type: GET_REPORTS,\n      payload: result\n    });\n  };\n};","map":{"version":3,"names":["axios","GET_REPORTS","GET_PROCESSDETAIL","POST_REPORT","PUT_REPORT","callReportManagementAPI","currentPage","console","log","requestURL","undefined","dispatch","getState","result","fetch","method","headers","then","response","json","type","payload","callReportRegistAPI","form","get","distinction","post","reportUserNick","refReportCategoryNo","productCode","reportComment","sellStatusCode","processDistinction","callReportUpdateAPI","getStatus","date","Date","processCode","put","reportNo","processComment","processDate","callReportDetailAPI","status","callSearchReportAPI","search"],"sources":["/Users/minbumkim/Desktop/[FE]/src/apis/ReportAPICalls.js"],"sourcesContent":["import axios from 'axios';\nimport {\n    GET_REPORTS,\n    GET_PROCESSDETAIL,\n    POST_REPORT,\n    PUT_REPORT\n} from '../modules/ReportModule.js'\n\nexport const callReportManagementAPI = ({ currentPage }) => {\n\n    console.log('[ReportAPICalls] callReportAPI Call')\n\n    let requestURL;\n\n    if (currentPage !== undefined || currentPage !== null) {\n        requestURL = `http://localhost:8000/reports/reports?offset=${currentPage}`;\n    } else {\n        requestURL = `http://localhost:8000/reports/reports`\n    }\n\n    return async (dispatch, getState) => {\n\n        const result = await fetch(requestURL, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"*/*\"\n            }\n        })\n            .then(response => response.json());\n        console.log('[ReportAPICalls] callReportList Result : ', result);\n        dispatch({ type: GET_REPORTS, payload: result });\n    };\n}\n\nexport const callReportRegistAPI = ({ form }) => {\n    const requestURL = `http://localhost:8000/reports/report`;\n\n    console.log('[ReportRegist] fromData 유저닉네임 : ', form.get('reportUserNick'));\n    let distinction = \"N\";\n    return async (dispatch, getState) => {\n        const result = await axios.post(requestURL, {\n\n            reportUserNick: form.get('reportUserNick'),\n            refReportCategoryNo: form.get('refReportCategoryNo'),\n            productCode: form.get('productCode'),\n            reportComment: form.get('reportComment'),\n            sellStatusCode: form.get('sellStatusCode'),\n            processDistinction: distinction\n        }\n\n        ).then(response => response);\n        console.log('[ReportAPICalls] callReportWriteAPI RESULT : ', result);\n        dispatch({ type: POST_REPORT, payload: result });\n    };\n}\n\nexport const callReportUpdateAPI = ({ form }) => {\n    console.log('[ReportAPICalls] callProductUpdateAPI Call');\n\n    const requestURL = `http://localhost:8000/reports/process`\n\n    return async (dispatch, getStatus) => {\n\n        let date = new Date();\n        let processCode = \"Y\";\n\n        const result = await axios.put(requestURL, {\n            reportNo: form.get('reportNo'),\n            processDistinction: processCode,\n            processComment: form.get('processComment'),\n            sellStatusCode: form.get('sellStatusCode'),\n            processDate: date\n        })\n            .then(response => response);\n        console.log('[ReportAPICalls] callProductUpdateAPI RESULT : ', result)\n        dispatch({ type: PUT_REPORT, payload: result });\n    };\n}\n\nexport const callReportDetailAPI = ({ reportNo }) => {\n\n    console.log(\"[ReportAPICalls] ReportDetailAPI :\", reportNo);\n\n    const requestURL = `http://localhost:8000/reports/processDetail/${reportNo}`;\n\n    console.log('[ReportAPICall] callReportDetailAPI : ')\n\n    return async (dispatch, getState) => {\n\n        const result = await fetch(requestURL, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"*/*\"\n            }\n        })\n            .then(response => response.json());\n\n        console.log('[ReportAPICalls] callReportDetailAPI RESULT : ', result);\n        if (result.status === 200) {\n            console.log('[ReportAPICalls] callReportDetailAPI SUCCESS');\n            dispatch({ type: GET_PROCESSDETAIL, payload: result });\n        }\n    }\n}\n\nexport const callSearchReportAPI = ({search}) => {\n    console.log('[ReportAPICalls] callSearchReportAPI Call');\n\n    console.log(\"에피아이 안들어오냐 ? ? :\", search);\n\n    const requestURL = `http://localhost:8000/search?s=${search}`;\n\n    return async (dispatch, getState) => {\n\n        const result = await fetch(requestURL, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"*/*\"\n            }\n        })\n            .then(response => response.json());\n        console.log('[ReportAPICalls] callSearchReportAPI RESULT : ', result);\n\n        dispatch({ type: GET_REPORTS, payload: result });\n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}